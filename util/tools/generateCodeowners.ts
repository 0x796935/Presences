import "source-map-support/register";

import { writeFileSync } from "node:fs";
import { missingMetadata, allmeta } from "./util";

function main() {
	if (missingMetadata?.length > 0) {
		console.log(
			`\nThe following presence${
				missingMetadata.length > 1 ? "s don't" : "doesn't"
			} include a metadata file :\n${missingMetadata.join(", ")}`
		);
	}

	let codeowners: [path: string, owners: string][] = [];
	for (const [index, [metadata, path]] of allmeta
		.filter(
			([metadata]) =>
				metadata.author.github || metadata.contributors?.some(c => c.github)
		)
		.entries()) {
		codeowners[index] = ["", ""];
		codeowners[index][0] = path.replace("/dist/metadata.json", "");
		if (metadata.author?.github) {
			codeowners[index][1] = `@${metadata.author?.github}`;
		}

		for (const contributor of metadata.contributors ?? []) {
			if (typeof contributor?.github === "string")
				codeowners[index][1] += `${codeowners[index][1] && " "}@${
					contributor.github
				}`;
		}
	}
	const maxLength =
		[...codeowners].sort((a, b) => b[0].length - a[0].length)[0][0].length + 4;
	if (codeowners.length) {
		writeFileSync(
			"./.github/CODEOWNERS",
			"# This file is automatically generated.\n# Add your GitHub username to the author or contributor objects in the metadata of your presence\n\n" +
				codeowners
					.map(([path, owners]) => {
						console.log(path, path.length)
						return `${path}${" ".repeat(maxLength - path.length)}${owners}`;
					})
					.join("\n")
		);
	}
	console.log(`Successfully wrote codeowners file`);
}

main();
